# -*- coding: utf-8 -*-
"""
Created on Sat Feb 29 21:02:56 2020

@author: a0105
"""

import pandas as pd
import numpy as np
import os

os.chdir(r'C:\Users\a0105\Desktop\[GlobalChallenge]data_rev01')

medical = pd.read_json('./data/medical_rev02.json',orient='table')
medical.columns

DUR_ban_list = pd.read_excel("./data/부작용_DUR.xlsx")
DUR_ban_list.dtypes

DUR_ban_list2 = DUR_ban_list.groupby(['품목일련번호'])['부작용'].agg(lambda col: '| '.join(col)).reset_index()
# DUR_ban_list2['부작용'] = DUR_ban_list2['부작용'].str.split('|')

medical['item_code'] = medical['item_code'].astype('int64')

medical_df = pd.merge(medical,DUR_ban_list2,left_on="item_code" ,right_on="품목일련번호", how="left")

medical_df['부작용'] = medical_df['부작용'].fillna('')
medical_df['부작용'] = medical_df['부작용'].str.split('|')

for a in range(len(medical_df['부작용'])):
    medical_df['부작용'][a] = [i for i in medical_df['부작용'][a] if i]

    if medical_df['부작용'][a]==[]:
        medical_df['부작용'][a] = None

medical_df['save_method'] = medical_df['save_method'].replace('\r\n','',regex=True)
medical_df['save_method'] = medical_df['save_method'].replace('\n','',regex=True)

del medical_df['dosage']
del medical_df['effect']
del medical_df['품목일련번호']

medical_df

medical_df2 = medical_df[['alchol','combinataion_ban','부작용','bad_effect']]

from collections import defaultdict

group_data = OrderedDict()
bad_effect = OrderedDict()

data = []

for i in range(len(medical_df)):

    group_data = defaultdict()
    bad_effect = defaultdict()

    bad_effect["alchol"] = medical_df['alchol'][i]
    bad_effect["combination_ban"] = medical_df['combinataion_ban'][i]
    bad_effect["dur_ban"] = medical_df['부작용'][i]
    bad_effect["bad_effect"] = medical_df['bad_effect'][i]

    group_data["item_code"] = medical_df['item_code'][i]
    group_data["medicine_name"] = medical_df['medicine_name'][i]
    group_data["save_method"] = medical_df['save_method'][i]
    group_data["valid_date"] = medical_df['valid_dates'][i]
    group_data["bad_effect"] = bad_effect

    data.append(group_data)

import numpy as np

class NpEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, np.integer):
            return int(obj)
        elif isinstance(obj, np.floating):
            return float(obj)
        elif isinstance(obj, np.ndarray):
            return obj.tolist()
        else:
            return super(NpEncoder, self).default(obj)

m_json = json.dumps(data, ensure_ascii=False, indent=4, cls=NpEncoder)

with open('sample.json', 'w') as outfile:
    json.dump(m_json, outfile)
